Timer unit: 1e-06 s

Total time: 0.287557 s
File: /home/uash/JupyterWorkspace/Library/Ikamoana/ikamoana/ikamoanafields/ikamoanafields.py
Function: gradient at line 94

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    94                                               def gradient(self,
    95                                                            field: xr.DataArray,
    96                                                            landmask: xr.DataArray) -> Tuple[xr.DataArray]:
    97                                           
    98                                                   """
    99                                                   Gradient calculation for a Xarray DataArray seapodym-equivalent calculation
   100                                                   requires LandMask forward and backward differencing for domain edges
   101                                                   and land/shallow sea cells.
   102                                                   """
   103                                           
   104         2        282.0    141.0      0.1          if ((field.lat.size != landmask.lat.size)
   105         1        167.0    167.0      0.1                  or (field.lon.size != landmask.lon.size)) :
   106                                                       raise ValueError("Field and landmask must have the same dimension.")
   107                                           
   108         1          2.0      2.0      0.0          def getCellEdgeSizes(field) :
   109                                                       """Copy of the Field.calc_cell_edge_sizes() function in Parcels.
   110                                                       Avoid the convertion of DataArray into Field."""
   111                                                       
   112                                                       ## NOTE : Verify if reindex will impact dx and dy 
   113                                                       if field.lat[0] > field.lat[-1] :
   114                                                           field = field.reindex(lat=list(reversed(field.lat)))
   115                                                       
   116                                                       field_grid = parcels.grid.RectilinearZGrid(
   117                                                           field.lon.data, field.lat.data,
   118                                                           depth=None, time=None, time_origin=None,
   119                                                           mesh='spherical') # In degrees
   120                                           
   121                                                       field_grid.cell_edge_sizes['x'] = np.zeros((field_grid.ydim, field_grid.xdim), dtype=np.float32)
   122                                                       field_grid.cell_edge_sizes['y'] = np.zeros((field_grid.ydim, field_grid.xdim), dtype=np.float32)
   123                                           
   124                                                       # x_conv = GeographicPolar() if field_grid.mesh == 'spherical' else UnitConverter()
   125                                                       # y_conv = Geographic() if self.grid.mesh == 'spherical' else UnitConverter()
   126                                                       x_conv = GeographicPolar()
   127                                                       y_conv = Geographic()
   128                                           
   129                                                       for y, (lat, dlat) in enumerate(zip(field_grid.lat, np.gradient(field_grid.lat))):
   130                                                           for x, (lon, dlon) in enumerate(zip(field_grid.lon, np.gradient(field_grid.lon))):
   131                                                               field_grid.cell_edge_sizes['x'][y, x] = x_conv.to_source(dlon, lon, lat, field_grid.depth[0])
   132                                                               field_grid.cell_edge_sizes['y'][y, x] = y_conv.to_source(dlat, lon, lat, field_grid.depth[0])
   133                                                       
   134                                                       return field_grid.cell_edge_sizes['x'], field_grid.cell_edge_sizes['y']
   135                                           
   136         1     144620.0 144620.0     50.3          dlon, dlat = getCellEdgeSizes(field)
   137                                                   
   138         1        300.0    300.0      0.1          nlat = field.lat.size
   139         1        181.0    181.0      0.1          nlon = field.lon.size
   140                                           
   141         1        307.0    307.0      0.1          data = np.nan_to_num(field.data)
   142         1          8.0      8.0      0.0          landmask = landmask.data
   143         1          8.0      8.0      0.0          dVdlon = np.zeros(data.shape, dtype=np.float32)
   144         1          3.0      3.0      0.0          dVdlat = np.zeros(data.shape, dtype=np.float32)
   145                                           
   146                                                   # # Already exchange lat and lon in landmask functions
   147                                                   # landmask = np.transpose(landmask.data[0,:,:])
   148                                           
   149                                                   # X = nlon if nlon <= landmask.shape[0] else landmask.shape[0]
   150                                                   # Y = nlat if nlat <= landmask.shape[1] else landmask.shape[1]
   151                                           
   152                                                   ## NOTE : Parallelised execution may help to do it faster.
   153         2        127.0     63.5      0.0          for t in range(field.time.size):
   154       100        139.0      1.4      0.0              for lon in range(1, nlon-1):
   155                                                           ## NOTE : Be carefull, reindex (in getCellEdgeSizes) probably reverse Latitude order
   156      5841       9331.0      1.6      3.2                  for lat in range(1, nlat-1):
   157      5742      21606.0      3.8      7.5                      if landmask[lat, lon] < 1:
   158                                           
   159      3376      12731.0      3.8      4.4                          if landmask[lat, lon+1] == 1:
   160        37        111.0      3.0      0.0                              dVdlon[t,lat,lon] = (data[t,lat,lon] - data[t,lat,lon-1]) / dlon[lat, lon]
   161      3339      12479.0      3.7      4.3                          elif landmask[lat, lon-1] == 1:
   162        27         71.0      2.6      0.0                              dVdlon[t,lat,lon] = (data[t,lat,lon+1] - data[t,lat,lon]) / dlon[lat, lon]
   163                                                                   else:
   164      3312      28092.0      8.5      9.8                              dVdlon[t,lat,lon] = (data[t,lat,lon+1] - data[t,lat,lon-1]) / (2*dlon[lat, lon])
   165                                           
   166      3376      13454.0      4.0      4.7                          if landmask[lat+1, lon] == 1:
   167        11         27.0      2.5      0.0                              dVdlat[t,lat,lon] = (data[t,lat,lon] - data[t,lat-1,lon]) / dlat[lat, lon]
   168      3365      12703.0      3.8      4.4                          elif landmask[lat-1, lon] == 1:
   169        46        148.0      3.2      0.1                              dVdlat[t,lat,lon] = (data[t,lat+1,lon] - data[t,lat,lon]) / dlat[lat, lon]
   170                                                                   else:
   171      3319      27643.0      8.3      9.6                              dVdlat[t,lat,lon] = (data[t,lat+1,lon] - data[t,lat-1,lon]) / (2*dlat[lat, lon])
   172                                           
   173        99        291.0      2.9      0.1                  dVdlat[t, 0, lon] = (data[t, 1, lon] - data[t, 0, lon]) / dlat[0, lon]
   174        99        251.0      2.5      0.1                  dVdlat[t, -1, lon] = (data[t, -1, lon] - data[t, -2, lon]) / dlat[-2, lon]
   175                                           
   176        61         82.0      1.3      0.0              for lat in range(nlat):
   177        60        136.0      2.3      0.0                  dVdlon[t, lat, 0] = (data[t, lat, 1] - data[t, lat, 0]) / dlon[lat, lon]
   178        60        133.0      2.2      0.0                  dVdlon[t, lat, -1] = (data[t, lat, -1] - data[t, lat, -2]) / dlon[lat, lon]
   179                                           
   180         1         43.0     43.0      0.0          assert not (True in np.isnan(dVdlon))
   181         1         19.0     19.0      0.0          assert not (True in np.isnan(dVdlat))
   182                                           
   183         1          2.0      2.0      0.0          return (
   184         2       1073.0    536.5      0.4              xr.DataArray(
   185         1          7.0      7.0      0.0                  name = 'd' + field.name + '_dlon',
   186         1          2.0      2.0      0.0                  data = dVdlon,
   187         1          5.0      5.0      0.0                  coords = field.coords,
   188         1          1.0      1.0      0.0                  dims=('time','lat','lon'),
   189         1          6.0      6.0      0.0                  attrs=field.attrs
   190                                                       ),
   191         2        952.0    476.0      0.3              xr.DataArray(
   192         1          3.0      3.0      0.0                  name = 'd' + field.name + '_dlat',
   193         1          2.0      2.0      0.0                  data = dVdlat,
   194         1          3.0      3.0      0.0                  coords = field.coords,
   195         1          2.0      2.0      0.0                  dims=('time','lat','lon'),
   196         1          4.0      4.0      0.0                  attrs=field.attrs
   197                                                       )
   198                                                   )